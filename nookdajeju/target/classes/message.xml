<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="messagens">

<!-- 메세지 리스트 가져오기 -->
<select id="message_list" parameterType="messageModel" resultType="com.ch.nookdajeju.model.MessageModel">
    select msgno, mroom, send_nick, recv_nick, send_time, read_time, msg_text, read_chk
    from message
    where msgno in (select max(msgno) from message group by mroom) and (send_nick = #{nickname} or recv_nick=#{nickname})
    order by msgno desc
</select>

<!-- 메세지 list에서 상대방 profile 가져오기 -->
<select id="get_other_profile" parameterType="messageModel" resultType="string">
    select * from member
    <choose>
        <when test="send_nick == nickname">
            where nickname = #{recv_nick}
        </when>
        <otherwise>
            where nickname = #{send_nick}
        </otherwise>
    </choose>
</select>

<!-- 안읽은 메세지 개수 가져오기 --> 
<select id="count_unread" parameterType="messageModel" resultType="integer">
    select count(msgno) from message 
    where recv_nick=#{nickname} and read_chk=0 and mroom=#{mroom}
</select>

 <!-- room 별 메세지 내용 가져오기 --> 
<select id="room_content_list" parameterType="messageModel" resultType="com.ch.nookdajeju.model.MessageModel">
    select m.msgno, m.mroom, m.send_nick, m.recv_nick, m.send_time, m.read_time, m.msg_text, m.read_chk
    from message m left outer join member member
    on m.send_nick = member.nickname
    <choose>
        <when test="mroom != 0">
            where mroom = #{mroom}
        </when>
        <otherwise>
            where (recv_nick = #{recv_nick} and send_nick = #{nickname}) or (send_nick = #{recv_nick} and recv_nick = #{nickname})
        </otherwise>
    </choose>
</select>

<!-- 메세지 읽음 처리 --> 
<update id="message_read_chk" parameterType="messageModel">
    update message set read_chk=1
    <choose>
        <when test="mroom != 0">
            where mroom=#{mroom} and read_chk=0 and recv_nick=#{nickname}
        </when>
        <otherwise>
            where send_nick=#{recv_nick} and read_chk=0 and recv_nick=#{nickname}
        </otherwise>
    </choose>
</update>

 <!-- 메세지리스트에서 메세지 보내기 수정 전 -->
 <!--
<insert id="messageSendInlist" parameterType="messageModel">
		<selectKey keyProperty="msgno" order="BEFORE" resultType="integer">
			select nvl(max(msgno),0) +1 msgno from message 
		</selectKey>
    <choose>
        <when test="mroom != 0">
            insert into message values(#{msgno}, #{mroom}, #{send_nick}, #{recv_nick}, sysdate, sysdate, #{msg_text}, 0)
        </when>
        <otherwise>
            insert into message values(#{msgno}, #{mroom}, #{send_nick}, #{recv_nick}, sysdate, sysdate, #{msg_text}, 0)
        </otherwise>
    </choose>
</insert>
  -->
  
<!-- 메세지리스트에서 메세지 보내기 수정 후 -->
<insert id="insert2" parameterType="messageModel">
		<selectKey keyProperty="msgno" order="BEFORE" resultType="integer">
			select nvl(max(msgno),0) +1 msgno from message 
		</selectKey>
    <choose>
        <when test="mroom != 0">
            insert into message values(#{msgno}, #{mroom}, #{send_nick}, #{recv_nick}, sysdate, sysdate, #{msg_text}, 0)
        </when>
        <otherwise>
            insert into message values(#{msgno}, #{mroom}, #{send_nick}, #{recv_nick}, sysdate, sysdate, #{msg_text}, 0)
        </otherwise>
    </choose>
</insert>

<select id="selectOne" parameterType="messageModel" resultType="messageModel">
	select * from message where msgno = #{msgno}
</select>

 <!-- room 번호 최댓값 구하기 --> 
<select id="max_room"  parameterType="messageModel" resultType="integer">
    select nvl(max(mroom),0) + 1 from message
</select>

 <!-- 메세지 이력이 있는지 검색 --> 
<select id="exist_chat" parameterType="messageModel" resultType="integer">
    select count(msgno) from message 
    where (recv_nick = #{recv_nick} and send_nick=#{send_nick}) or (send_nick = #{recv_nick} and recv_nick=#{send_nick})
</select>

<!-- 기존 메세지 내역의 room 번호를 가져옴 --> 
<select id="select_room"  parameterType="messageModel" resultType="integer">
 	select * from (select e.*, rowNum rn
		from (select mroom from message
    where (recv_nick = #{recv_nick} and send_nick=#{send_nick}) 
    or (send_nick = #{recv_nick} and recv_nick=#{send_nick})) e)
	where rn between 0 and 1
</select>

</mapper>